#!/usr/bin/bash

source "$SCRIPT_SETUP_DIR/env.sh"
source "$SCRIPT_SETUP_DIR/utils.sh"

#
# Packages
#

install_packages() {
    logger "‚è≥PACKAGES SETUP STARTED"

    # # if if_not_installed_then_install base base-devel archlinux-keyring sudo vim \
    #     # ninja curl cmake make wget curl tar unzip zip p8zip \
    #     # ripgrep fd fzf tree-sitter tree-sitter-cli bat \
    #     # python python-pip python-pynvim luarocks jdk-openjdk lua52 \
    #     # polkit brightnessctl grim slurp network-manager-applet \
    #     # noto-fonts noto-fonts-emoji noto-fonts-extra \
    #     # ttf-dejavu ttf-liberation ttf-jetbrains-mono ttf-nerd-fonts-symbols-mono; then
    #     logger "‚úÖ PACKAGES SETUP DONE"
    #     return 1
    #
    # fi

    if if_not_installed_then_install \
        # base base-devel archlinux-keyring sudo vim \
        # ninja curl cmake make wget tar unzip zip p8zip; then

        logger "asdf"

    fi

    # if if_not_installed_then_install \
    #     ripgrep fd fzf tree-sitter tree-sitter-cli bat; then
    #     logger "sadfs"
    #
    # fi

    if if_not_installed_then_install \
        # mpv feh libreoffice-fresh acpi htop tree \
        # neofetch discord firefox zsh wezterm \
        # mpv feh libreoffice-fresh acpi htop tree; then

        logger "sdafs"
    fi

    # if if_not_installed_then_install \
    #     zsh wezterm; then
    # fi

    if if_not_installed_then_install \
        # python python-pip python-pynvim luarock jdk-openjdk lua52; then
        logger "sdafs"
    fi

    if if_not_installed_then_install \
        # noto-fonts noto-fonts-emoji noto-fonts-extra \
        # ttf-dejavu ttf-liberation ttf-jetbrains-mono \
        # ttf-nerd-fonts-symbols-mono; then

        logger "‚úÖ FONTS DOWNLOADED"
    fi

    logger "üî¥ PACKAGES SETUP FAILED"
    return 2
}

#
# Aux Tools
#

# install_aux_tools() {
#     logger "‚è≥AUX TOOLS SETUP STARTED"
#
#     install_nvm() {
#         if [ ! -d "$NVM_DIR" ]; then
#             mkdir "$NVM_DIR"
#             if ! sudo curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v1.39.7/install.sh | bash; then
#                 logger "Failed to install nvm."
#                 return 2
#             fi
#         else
#             logger "nvm already installed."
#             return 1
#         fi
#         return 1
#     }
#
#     if if_not_installed_then_install curl; then
#         if clone_makepkg https://aur.archlinux.org/yay.git; then
#             if clone_makepkg https://aur.archlinux.org/paru.git; then
#                 if install_nvm; then
#                     [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
#                     if nvm install node; then
#                         logger "‚úÖ AUX TOOLS SETUP DONE"
#                         return 1
#                     else
#                         logger "Failed to install node"
#                         return 2
#                     fi
#                 fi
#             fi
#         fi
#     fi
#
#     logger "üî¥ AUX TOOLS SETUP FAILED"
#     return 2
# }

#
# Audio
#

# install_and_setup_audio() {
#     logger "‚è≥AUDIO SETUP STARTED"
#
#     if if_not_installed_then_install pulseaudio pulseaudio-alsa pulseaudio-jack; then
#         if if_not_installed_then_install pavucontrol pamixer playerctl; then
#             if systemctl --user enable --now pulseaudio; then
#                 logger "‚úÖ AUDIO SETUP DONE"
#                 return 1
#             fi
#         fi
#     fi
#
#     logger "üî¥ AUDIO SETUP FAILED"
#     return 2
# }

### SYSTEM
# disable_powerbutton() {
#     if ! sudo sed -i 's/^#*\s*HandlePowerKey\s*=.*/HandlePowerKey=ignore/' \
#         /etc/systemd/logind.conf; then
#         logger "Failed to update logind.conf"
#         return 2
#     fi
#     return 1
# }

#
# Neovim
#

install_and_setup_neovim() {
    logger "‚è≥NEOVIM SETUP STARTED"

    install_requirements() {
        if if_not_installed_then_install \
            base-devel cmake unzip ninja curl \
            python-pynvim luarocks lua52 \
            tree-sitter tree-sitter-cli bat; then
            logger "Successfully download neovim packages"
            return 1
        fi
    }

    install_neovim() {
        if [ ! -d "$XDG_DOWNLOAD_DIR/neovim" ] && ! cmd_check nvim; then
            git clone https://github.com/neovim/neovim "$XDG_DOWNLOAD_DIR/neovim"
            make --directory="$XDG_DOWNLOAD_DIR/neovim" CMAKE_BUILD_TYPE=Release
            sudo make --directory="$XDG_DOWNLOAD_DIR/neovim" install
            rm -rf "$XDG_DOWNLOAD_DIR/neovim"

            logger "Successfully installed neovim."
            return 1
        fi
    }

    clone_config() {
        if [ ! -d "$XDG_CONFIG_HOME/nvim" ]; then
            git clone https://github.com/Maxdep1/nvim.git "$XDG_CONFIG_HOME/nvim"

            logger "Successfully cloned nvim."
            return 1
        else
            logger "nvim config already exits."
            return 1
        fi
    }

    if install_requirements; then
        if install_neovim; then
            if clone_config; then
                logger "‚úÖ NEOVIM SETUP DONE"
                return 1
            fi
        fi
    fi

    logger "üî¥ NEOVIM SETUP FAILED"
    return 2
}

#
# Wayland
#

install_and_setup_wayland() {
    logger "‚è≥WAYLAND SETUP STARTED"

    if if_not_installed_then_install wayland-protocols hyprland xorg-server-xwayland; then
        if if_not_installed_then_install wpaperd waybar wofi; then
            logger "‚úÖ WAYLAND SETUP DONE"
            return 1
        fi
    fi

    logger "üî¥ WAYLAND SETUP FAILED"
    return 2
}

#
# Intel Drivers
#

install_intel_drivers() {
    logger "‚è≥INTEL DRIVERS SETUP STARTED"

    if if_not_installed_then_install mesa mesa-utils; then
        if if_not_installed_then_install intel-media-driver intel-gpu-tools intel-compute-runtime; then
            if if_not_installed_then_install vulkan-intel vulkan-mesa-layers; then
                yay -S --needed auto-cpufreq
                sudo auto-cpufreq --install
                logger "‚úÖ INTEL DRIVERS SETUP DONE"
                return 1
            fi
        fi
    fi

    logger "üî¥ INTEL DRIVERS SETUP FAILED"
    return 2
}

#
# Nvidia Drivers
#

install_nvidia_drivers() {
    logger "‚è≥NVIDIA DRIVERS SETUP STARTED"

    update_grub() {
        # grub
        # nvidia-drm.fbdev=2 is experimental feature for 545+ drivers
        # It provides its own framebuffer console and replace efifb, vesafb
        if sudo sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT="[^"]*"/GRUB_CMDLINE_LINUX_DEFAULT="loglevel=4 quiet rd.driver.blacklist=nouveau nvidia-drm.modeset=1 nvidia-drm.fbdev=1"/' \
            "/etc/default/grub"; then
            sudo grub-mkconfig -o /boot/grub/grub.cfg

            logger "Successfully updated grub."
            return 1
        fi

        logger "Failed to update grub."
    }

    update_mkinitcpio() {
        if sudo sed -i \
            -e 's/^HOOKS=(.*)$/HOOKS=(base udev autodetect microcode modconf keyboard keymap consolefont block filesystems fsck)/' \
            -e 's/^MODULES=(.*)/MODULES=(i916 nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' \
            "/etc/mkinitcpio.conf"; then

            sudo mkinitcpio -P
            logger "Successfully updated mkinitcpio."
            return 1

        fi
        logger "Failed to update mkinitcpio."
    }

    # if if_not_installed_then_install_yay nvidia-beta-dkms nvidia-utils-beta nvidia-settings-beta opencl-nvidia-beta; then
        if if_not_installed_then_install nvidia-dkms nvidia-utils nvidia-settings opencl-nvidia; then
        if if_not_installed_then_install libva-nvidia-driver linux-headers vulkan-icd-loader nvidia-prime nvtop; then
            if update_grub; then
                if update_mkinitcpio; then
                    sudo systemctl enable nvidia-suspend.service
                    sudo systemctl enable nvidia-hibernate.service
                    sudo systemctl enable nvidia-resume.service
                    logger "‚úÖ NVIDIA DRIVERS SETUP DONE"
                    return 1
                fi
            fi

        fi
    fi

    logger "üî¥ NVIDIA DRIVERS SETUP FAILED"
    return 2
}

main() {
    logger "‚è≥‚è≥ BASE SETUP STARTED"

    if install_packages; then
        if disable_powerbutton; then
            if install_aux_tools; then
                if install_and_setup_audio; then
                    if install_and_setup_neovim; then
                        if install_and_setup_wayland; then
                            if install_intel_drivers; then
                                if install_nvidia_drivers; then
                                    logger "‚úÖ‚úÖ BASE SETUP DONE"
                                    yay -S --needed --noconfirm clipman satty
                                    yay -S --needed spotify
                                    yay -S --needed microsoft-edge-stable-bin
                                    return 1
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        fi
    fi

    logger "üî¥üî¥ BASE SETUP FAILED"
    return 2
}

main
