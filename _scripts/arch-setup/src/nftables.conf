#!/usr/bin/nft -f
# vim:set ts=2 sw=2 et:
########################################
# IPv4/IPv6,  examples in /usr/share/nftables/ and /usr/share/doc/nftables/examples/.

include "/etc/nftables.d/private.conf"
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# define SSH_PORT = port
# add element inet filter allowed_ips {
#     ipx.xxx.xx.xx . port,
# }

flush ruleset

table inet filter {
    define ssh_port = $SSH_PORT  # from private.conf
	# Input
	
	counter cnt_ssh {}
	counter cnt_established_related {}
	counter cnt_invalid {}
	counter cnt_icmp {}


	set timeout_stage_1 {
		typeof ip saddr
		flags timeout
	}

	set timeout_stage_2 {
		typeof ip saddr
		flags timeout
	}

	set timeout_stage_3 {
		typeof ip saddr
		flags timeout
	}


	set allowed_ips {
		typeof ip saddr . tcp dport
		flags interval,constant
		auto-merge
        # elements from private.conf
	}

	chain input {
		type filter hook input priority filter; policy drop;

		# Established/Related connections
		ct state established,related counter name "cnt_established_related" accept

		# Invalid Connections
		ct state invalid counter name "cnt_invalid" drop
		
		# Allow from loopback
		iif "lo" counter accept
		
		# Allow SSH for specific IPs
		ct state new ip saddr . tcp dport @allowed_ips counter name "cnt_ssh" accept

		# Limit new SSH connections
		ct state new tcp dport $ssh_port limit rate 10/minute accept

		# ssh_port Unauthorized IP timeout stage 3
		ct state new ip saddr @timeout_stage_2 tcp dport $ssh_port add @timeout_stage_3 { ip saddr timeout 60m }
		ct state new ip saddr @timeout_stage_1 tcp dport $ssh_port add @timeout_stage_2 { ip saddr timeout 5m }
		ct state new tcp dport $ssh_port add @timeout_stage_1 { ip saddr timeout 1m }

		# Match @timeout_stage_3 IP and drop
		ct state new ip saddr @timeout_stage_3 tcp dport $ssh_port counter drop

		# Block private IPs
		ip saddr { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16 } counter drop
		
                # Log and drop other packets
 	        counter log prefix "Dropped packet: " drop
	    }


	
	# Output

	set outgoing_tcp_connections {
		typeof meta skuid . ip daddr . tcp dport;
		counter;
	}

	chain output {
		type filter hook output priority filter; policy accept;

		ct state new ip protocol tcp add @outgoing_tcp_connections { meta skuid . ip daddr . tcp dport }
	}

	# Forward

	chain forward {
		type filter hook forward priority filter; policy drop;
	}


}

